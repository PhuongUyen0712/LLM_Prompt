import json
import re

# =======================
# 1Ô∏è‚É£ Load dataset & output
# =======================
with open("selected_dialogues.json", "r", encoding="utf-8") as f:
    dataset = json.load(f)

# D·ªØ li·ªáu th·∫≠t n·∫±m trong key "dialogues"
dialogues = dataset["dialogues"] if isinstance(dataset, dict) else dataset

with open("barem_results_full.json", "r", encoding="utf-8") as f:
    results = json.load(f)

print(f"üß© T·ªïng s·ªë h·ªôi tho·∫°i trong dataset: {len(dialogues)}")

# =======================
# 2Ô∏è‚É£ H√†m parse JSON t·ª´ raw_output
# =======================
def extract_json_objects(text):
    text = re.sub(r"```json|```", "", text).strip()
    try:
        data = json.loads(text)
        if isinstance(data, list):
            return data
        else:
            return [data]
    except Exception:
        pass

    # N·∫øu kh√¥ng load ƒë∆∞·ª£c to√†n b·ªô, t√°ch th·ªß c√¥ng t·ª´ng {...}
    objs = []
    matches = re.findall(r"\{[\s\S]*?\}", text)
    for m in matches:
        try:
            objs.append(json.loads(m))
        except:
            continue
    return objs

# =======================
# 3Ô∏è‚É£ Parse to√†n b·ªô batch
# =======================
parsed = []
for batch in results:
    objs = extract_json_objects(batch["raw_output"])
    print(f"‚Üí Batch {batch['batch_id']}: t√¨m th·∫•y {len(objs)} object JSON")
    parsed.extend(objs)

print(f"\nüßæ T·ªïng s·ªë JSON parse ƒë∆∞·ª£c t·ª´ output: {len(parsed)}")

# =======================
# 4Ô∏è‚É£ So kh·ªõp th·ª© t·ª± dialogue_id
# =======================
expected_ids = [d["dialogue_id"] for d in dialogues]

if len(expected_ids) == len(parsed):
    print("‚úÖ Kh√¥ng thi·∫øu h·ªôi tho·∫°i n√†o!")
else:
    diff = len(expected_ids) - len(parsed)
    print(f"‚ö†Ô∏è Thi·∫øu {diff} h·ªôi tho·∫°i!")

    # V√¨ m·ªói batch gi·ªØ nguy√™n th·ª© t·ª±, n√™n thi·∫øu cu·ªëi c√πng
    missing = expected_ids[len(parsed):]
    print("üï≥Ô∏è Thi·∫øu c√°c dialogue_id sau:", missing)
